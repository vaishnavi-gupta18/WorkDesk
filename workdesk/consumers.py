import json
from asgiref.sync import sync_to_async
from channels.db import database_sync_to_async
from django.core.mail import send_mail
from channels.generic.websocket import AsyncWebsocketConsumer
from workdesk.models import Member
from workdesk.serializers import CardSerializer
from .serializers import CommentSerializer, MemberSerializer
from .models import Member,Card

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = 'chat_%s' % self.room_name

        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    # Receive message from WebSocket
    async def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message = text_data_json['message']
        comment = await self.save_data(message)
        # Send message to room group
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': comment,
            }
        )
        await self.send_email(comment)

    # Receive message from room group
    async def chat_message(self, event):
        message = event['message']
        # Send message to WebSocket
        await self.send(text_data=json.dumps({
            'message': message,
        }))
        
        
    @sync_to_async
    def send_email(self, message):
        commentor = message['member']['fullname']
        task = Card.objects.get(id=message['card'])
        subject = 'New comment by '+commentor+' on the task "' + task.title + '"'
        body = 'This is an autogenerated email to inform you that '+commentor+ ' commented on the task "' + task.title + '" assigned to you.'
        send_mail(subject, body, 'testuser00981@gmail.com', 
        ['vaishnavigup1892@gmail.com'], fail_silently=False,)
        print(body)
    
    @database_sync_to_async
    def save_data(self, data):
        serializer = CommentSerializer(data=data)

        serializer.is_valid(raise_exception=True)

        x = serializer.create(serializer.validated_data)   
        
        data = CommentSerializer(x).data 
        sender = MemberSerializer(instance=Member.objects.get(id=data['member']))
        data['member'] = sender.data
        return data